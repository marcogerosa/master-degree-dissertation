RODAR ASPELL SPELL CHECKER
===========================
for f in *.tex; do aspell --mode=tex --encoding=iso-8859-1 check $f; done






*Desenvolvimento de Groupware Componentizado com Base no Modelo 3C de Colaboração* 
_Teste de doutorado do Marco Aurélio Gerosa_
http://groupware.les.inf.puc-rio.br/public/papers/teseGerosa/TeseGerosa.pdf

*Boas e Más Práticas no Desenvolvimento Web com MVC:Resultados de Um Questionário com Profissionais*
_Artigo do Maurício F. Aniche e Marco A. Gerosa_
http://www.lbd.dcc.ufmg.br/colecoes/vem/2015/008.pdf

*Uma Arquitetura de Referência para o Desenvolvimento de Aplicações Colaborativas Móveis Baseados em Componentes*
_Dissertação de mestrado do MAISON MELOTTI co-orientador Marco Aurélio Gerosa_
http://portais4.ufes.br/posgrad/teses/tese_8121_dissert%20maison%20melotti%20creama.pdf

*Prototipação de Sistemas Colaborativos Móveis com Base na Arquitetura de Referência CReAMA: Um Estudo de Caso da Plataforma Conecte Ideias*
_Artigo de Maison Melotti, Roberta Lima Gomes, Victor Raft Oliveira Nunes e Marco Aurélio Gerosa_
https://drive.google.com/file/d/0B7FkJ0UxP5NUcEtCYVU0WDJ0OGs/view

==============================================================================================================================
- Relevância e Problema

	15 e Verloop concluem que aplicativos android de fato possuem diferenças relevantes e não experimentadas até o momento, o que torna relevante pesquisas específicas.
	12, 13, 15
	11 fowler descreve 22 code smells e abordar em uma grande parte, refactoring para evitar estes code smells.


	Desempenham papéis de
		- Activities - uma tela. Obrigatório.
		- Fragments - fatiar a tela. 
		- Adapters - apresentar coleções de dados.
		- Listeners - responder a eventos. Obrigatório.
		- Layout Resources - UI. Obrigatório.

		Presentation UI
			- Layout Resources
		
		Presentation Behavior
			- Componente Activities
			- Fragments
			- Adapters
			- Listeners


	Todo aplicativo Android é formado por 4 componentes básicos. Cada um deles desempenhando um papel específico na aplicação. O componente responsável por exibir uma tela é a Activity. 

	Activities representam uma tela no Android cujo pode-se colocar a interface que desejar. Interfaces de usuários são representadas por uma hierarquia de views - classes que heredam da classe android.view.View. Each view controls a particular rectangular space within the activity's window and can respond to user interaction. For example, a view might be a button that initiates an action when the user touches it. Para responder a interações de usuários, usamos listeners.

	Uma View representa um objeto que desenha algo na tela cujo o usuário pode interagir (caixa de texto, botão, etc). Um ViewGroup é um objeto que contém outras Views (e ViewGoups) de forma a definir como este conjunto deve ser apresentado (linearmente, tabular, relativo um ao outro, etc). Para desenhar uma interface, Apesar de ser possível desenhar interfaces programaticamente, não é comum e nem recomendado [https://developer.android.com/guide/topics/ui/declaring-layout.html#AdapterViews]. A forma mais usual e recomendada é através de XMLs de Layout. Estas Views podem ser criadas programaticamente no entanto o mais comum é utilizar o vocabulario XML provido pelo Android SDK. 

	No próximo ano o Android completará uma década desde seu primeiro lançamento e não há dúvidas sobre o seu sucesso [asd, sdd, sadsad]. Isso significa que há uma década muitos aplicativos já foram criado e, ou foram descontinuados ou, ainda são mantidos e evoluídos. Apesar de há uma década estarmos desenvolvendo aplicativos Android, poucos se tem estudado a respeito. Segundo FULANA onde apresenta as principais conferências de manutenção de software vs trabalhos android vs trabalhos java. Por natureza da plataforma, Activities são classes que possuem muitas responsabilidades [Verloop], levando a um alto acoplamento, Martin Fowler provavelmente diria que elas são God Classes. Este é um dos problemas que temos instríseco ao Android. Naturalmente, desenvolvedores veem elaborando práticas para lidar com estes problemas específicos da plataforma. Alguns trabalhos já analisaram a frequência com que alguns code smells, já catalogados, por exemplo por Fowler e Mantyla, incidem em projetos Android. 

	[VERLOOP] O trabalho de Verloop por exemplo, apesar das relevantes contribuições feitas, a conclusão sobre a incidencia de tais code smells em projetos Android acaba por não ser muito conclusiva, visto que dos 6 code smells analisados (Large Class, Long Method, Long Parameter List, Type Checking, Feature Envy e Dead Code) apenas um deles, Long Method, se apresentar com destaque em projetos Android, os demais apresentam uma diferença mínima em projetos Android vs projetos tradicionais, e acabam por não ser conclusivos quanto a maior relevância deles em mobile ou não, apesar que Verloop conclui que Type Checking também é 2 x mais provável em mobile applications. Verloop conclui com algumas recomendações de refatoração de forma a mitigar a presença do code smell Long Method, conforme mencionado, de fato apresentado com maior relevância em projetos Android, estas recomendações são o uso do ViewHolder pattern em Adaoters, ele sugere um ActivityViewHolder para de forma a extrair código do método onCreate e deixá-lo menor, sugere o uso do atributo onClick em XML de layout e menu, sobre esta recomendação em específico, acredito que será entendida como um anti-pattern, visto que acopla o comportamento a um layout específico além do que hoje já é possível o uso de lambdas também no desenvolvimento android, encurtando muito portanto o tamanha das antigas classes anônimas e o uso de resource ids ao invés dos resources values, onde o código fica mais verboso, logo, mais complicado de ler, ele recomenda sempre que possível, usar o resource id ao invés do resource value. Apesar disso, sabemos que código legível resulta em tempo de desenvolvimento menor, pois códigos complexos dificultam o desenvolvimento de software. Das ferramentas de análise de código analisadas por Verloop, a única que suporta XML é a Lint, desenvolvida pela Google para Android. [DIFERENÇA] Esta tese se difere dele pois pretende-se identificar, validar e catalogar, com base na experiência de desenvolvedores, quais boas e más práticas, ao longo da última década, eles vem praticando ou evitando, respectivamente em projetos Android. Ou seja, não pretende-se a partir de um catálogo já estabelecido de code smells, identificar a incidência em projetos Android pois, apesar de em parte de um projeto Android, o que é puramente utilizado OO, estes code smells poderem ser aplicados, há outra parte em projetos Android, a camada de apresentação, onde não existe estrutura igual no desenvolvimento de software, tornando-a única e necessitada de estudos próprios, de code smells próprios, para guiar o desenvolvimento de código de qualidade, legível e com alto grau de manutenabilidade, assim como identificou-se no passado esta necessidade e valor em projetos OO, identifica-se no presente esta necessidade e valor em projetos Android. 

	[30 QUALITY SMELLS] Outro trabalho muito relevante realizado neste tema é A [Too-Supported Qual...]  que, baseado na documentação do Android, documenta 30 quality smells, no texto quality smells são definidos como "A quality smell is a certain struc- ture in a model, indicating that it negatively influences specific quality requirements, which can be resolved by particular model refactorings". Estes requisitos de qualidade são centrados no usuários (estabilidade, tempo de início, conformidade com usuário, experiência do usuário e acessibilidade) , eficiância no uso de recursos de hardware (eficiência geral, no uso de energia e meméria) e segurança. [DIFERENÇA] Esta tese se difere dele pois pretendemos encontra code smells em termos de qualidade de código, ou seja, que influênciem na legibilidade e manutenabilidade do código do projeto em desenvolvimento.



	A quantidade de aplicativos Android nativos sendo desenvolvidos e mantidos aumenta a cada dia. Nos últimos 10 anos este número passou de poucos a 2 milhões. Isso significa cada vez mais código Android sendo criado, alterado e mantido diariamente. No área de desenvolvimento de software sabemos a importância de manter um código limpo e de qualidade e apesar de Android utilizar a tecnologia Java para ser desenvolvido, não é completamente igual a um projeto Java ou um projeto Java Web, tendo portanto suas especificidades. 

	Diversas boas e más práticas já foram mapeadas para Java e Java Web, porém não encontramos em mesma quantidade estas mesmas análisas para projetos Android. Logo, o objetivo deste trabalho é identificar boas e más práticas em projetos Android, focando principalmente na camada de apresentação, que é onde mais se difere de projetos Java, e mapeá-las em maus cheiros. Desta forma, nossa contribuição será um conjunto validado de maus cheiros na camada de apresentacão de aplicativos Android, ajudando desenvolvedores a implementarem códigos melhores também em projetos Android e facilitando a evolução de ferramentas que identifiquem automaticamente estes maus cheiros.

	A camada de apresentação do Android lida com diversos tipos de objetos diferentes, para o fim desta pesquisa, entende-se por camada de apresentação no Android todo código que consta na pasta res (resources), Activity's, Fragment's, Adapter's, Listener's, View's or ViewGroup's. 

	Um problema conhecido é o alto acoplamento e baixa coesão das Activities onde as mesmas costumam recuperar e colocar informações na tela, eventualmente buscar os dados no banco de dados ou em serviços externos e lógicas de apresentação. Outro problema muito comum é a quantidade de arquivos na pasta resource principalmente nas subpastas drawable e layout onde respectivamente armazenamos imagens e layouts o xmls que representam as telas no Android, no começo de qualquer projeto não são um problema, mas ao longo da evolução, conforme vão aumentando a quantidade de layouts e imagens diferentes, estas subpastas ficam cada vez com mais e mais arquivos e começa a ficar extremamente trabalhoso de achar um arquivo sem olhar no código que o usa.

	Este trabalho visa responder as seguintes questões:

		Q1: Quais são as classes que representam a camada de apresentação no Android?

		Q2: Existe maus cheiros específicos para a camada de apresentação do Android?

		Q3: Qual a relação entre os maus cheiros propostos e o tendência a mudanças de classes?

		Q4: Qual a relação entre os maus cheiros propostos e o tendência a defeitos nas classes?

		Q5: Desenvolvedores percebem as classes afetadas pelos maus cheiros prpopostos como problemáticas?
	
==============================================================================================================================
- Fundamentação 
	Code Smell
	Android
	Qualidade de Código


==============================================================================================================================
- Método
	1. Definir o que é a CAMADA DE APRESENTAÇÃO.
		. Buscar em documentação, referências bibliográficas como artigos etc, se não encontrar, criar esta definição eventualmente através de um survey, entrevista com desenvolvedores referência, etc.
	
	2. Survey para identificar boas e más práticas na CAMADA DE APRESENTAÇÃO por parte de desenvolvedores. 
		. Divulgar o survey na comunidade, quando mais desenvolvedores melhor, inclusive de outros países.
		
		. Questão para identificar desenvolvedores que já trabalharam em projetos Java/Java Web, pois isso pode demonstrar algum impacto futuro. [NA DÚVIDA AINDA]
			. Mencionar sobre cada tipo de arquivo, ou seja, cada subfolder da pasta res, lembrando que a pasta vaues contém vários tipos de arquivos como strings, inteiros, cores, etc. Pode ser que um ponto seja a organização, níveis de aninhamneto, usar includes em layouts, styles separados, etc. Tem muita coisa que pode aparecer aqui inclusive a ideia de configurar mais um diretório com res folder no build.gradle.
			. Boas e más práticas em Activities, Fragments, Adapter e Listeners, em quais pacotes ficam estas classes.

	3. Identificar maus cheiros
		. Ver como o Aniche fez isso. -> Na mão e validou com um cara, mas não disse como, acho que foi na lábia.

	4. Validar maus cheiros com desenvolvedores especialistas
		. Entrevista estruturada para validação (GRAVAR). Questionário de geoposicionamento/background.
			Para cada smell os entrevistados devem responder se "acredita que este é um smell válido da camada de apresentação do Android? Justifique. (sim/não e por quê)". Incentivar discussões entre eles.
			Android especialistas 
				. Neto Marin (vale! é do google e trabalha há anos com android lá)
				. Ubiratan Soares (vale, há anos com android)
				. Rodrigo Sicarelli (vale, há anos com android)
				. Thiago Pilon (vale, há anos com android)
				. Paula Caroline (pode ser legal, menos experiência)
				. Rodrigo Amaro (+/- só com android no atual emprego, PagSeguro)
			
			OPÇÃO 1: 
			Em uma sala com projetor, apresentar o smell, um código com o smell e outro com o smell tratado e perguntar:
				. Ler o smell em voz alta
				. Perguntar em voz alta.

			OPÇÃO 2:
			Entrevistas individuais. Mesma pergunta só que sem as discussões.

	5. Analisar a percepção dos desenvolvedores com relação aos maus cheiros encontrados
		. Experimento em cima de um projeto pronto tendo uma versão do projeto com os maus cheiros não corrigidos e outra com os maus cheiros corrigidos. Solicitar aos desenvolvedores que implementem uma nova funcionalidade (de preferência que lide com a tela para que eles passem pelos códigos com maus cheiros ou da camada de apresentação). Limitar o tempo. Analisar o resultado da experiência deles em relação se conseguiram concluir ou não a funcionalidade no tempo dado, se acharam difícil ou fácil e por quê. Posso fazer esta análise com survey ou com uma entrevista coletiva gravada áudio e vídeo (seria show) ou mesmo os dois (seria melhor ainda).
		. Faz sentido obrigar o uso de TDD? Acho que não, não é o foco.
		. Houve a necessidade de refatoração no código já existente?
		. Pedir para usar uma sala na Caelum.

	6. Analisar o impacto dos maus cheiros com relação a propensão de mudança e propensão a introdução de bugs.
		(ACHO QUE TENHO QUE PENSAR EM ALGO MAIS COMPLEXO PARA CONSEGUIR TER DADOS PARA ANALISAR)
		Implemento um projeto de calculadora, uma versão com maus cheiros e outra sem.
			Colocar no github cada versão num repo separado
			Uma branch para cada dev. Pedir para fazerem pequenos commits do que estão fazendo, pushar ao final.
			Faço funcionar todas as operações menos uma (alguma específica?)

		Peço a desenvolvedores que implementem a operação faltante 
			Metade recebe o projeto sem smells e outra parte com smells
			Avaliar se:
				. A: Tempo até a conclusão da tarefa.
				. B: Quantos arquivos precisaram ser alterados?
					. Tirar métricas de quantos métodos e classes adicionados, apagados e alterados?
					. Qntos resources novos, alterados, apagados. 
					. Houve alteração com o objetivo de refatoração? Indica que o código estava ruim antes.
					. Qual a percepção do desenvolvedor com relação a qualidade do código?
				. C: Algum bug foi introduzido?

		O que espero:
			. Projetos com os smells tenham mais A, B e talvez C.
			. Percepção inicial do código seja ruim.
			(o contrário para projetos sem os smells)

		Um survey ao final da implementação?

==============================================================================================================================
- Estrutura do texto (parte da pesquisa): 
	Maus Cheiros 
		Introdução
			Pq é importante? O que indica isso, etc

		Método 
			Survey + validação com especialistas.					

		Q1 Catálogo de Maus Cheiros na Camada de Apresentação Android
			Listas catálogo. Nome e descrição da situação onde o maus cheiro é percebido e o que se recomenda para evitá-lo.


	Percepção dos Desenvolvedores e Propensão a Mudanças e Defeitos
		Introdução
			Falar sobre que se quer ter certeza de que devs o percebem pois pesquisas dizem que sim. Trecho do Aniche "Evidence in the literature suggests that code smells can hinder code maintainability [106, 122, 123], and increase change- and defect-proneness [61, 62], and are perceived by developers [86]."

		Método
			Explicar o experimento aqui
		
		Q2: Relação entre os maus cheiros propostos com a tendência a mudanças e defeitos

		Q3: Percepção dos desenvolvedores sobre os maus cheiros propostos



==============================================================================================================================
Buscar bibliografias em
	Citeseer - http://citeseer.ist.psu.edu
	ACM - portal.acm.ogr/portal.cfm
	IEEE Xplore - ieeexplore.ieee.org/guesthome.jsp
	Google
	http://www.periodicos.capes.gov.br
	Acessar da VPN USPNet - http://www.escritacientifica.sc.usp.br/bases-de-dados/#tabs-660-0-1



Por que a camada de apresentação e não todo o projeto?
	Porque é na camada de apresentação onde projetos android mais se diferenciam de projetos java tradicionais.

Por que no formato de Code Smells?
	Por que é uma forma fácil de criar ferramentas para realizarem análises estáticas de código apontando os problemas que serão listados.



==============================================================================================================================
- Relevância

Tracking the Software Quality of Android Applications along their Evolution
A Tool-Supported Quality Smell Catalogue For Android Developers (tool Refactory)
	- Existem aplicativos para identificar qualidade/antipatterns em aplicações android, são Paprika e inFusion e Rafactory.
	- Existe relação entre a quantidade de downloads e a quantidade de classes dos apps.
	- Fala com relação a introdução de mais antipatterns em aplicações android conforme sua evolução
	- Como trabalho futuro eles propoem analisar a relação da avaliação do aplicativo na store com o score de qualidade dado pelo Paprika.


Detecting Antipatterns in Android Apps
	- Também usa o Paprika e comenta dos maus cheiros de código que foram extraídos da documentação oficial e de experiência de desenvolvedores. Porém que esses maus cheiros são focados em eficiência, experiência do usuário, consumo de memória, tamanho do aplicativo, leaks de memória, etc, NÃO SOBRE qualidade de código e manutenção/evolução do mesmo.
	- Relação entre categoria do app vs antipattern encontrado.
	- Reimann et al. [30] propose a catalog of 30 quality smells dedicated to Android. These code smells are mainly originated from the good and bad practices documented online in Android documentations or by developers reporting their experience on blogs.


Understanding Code Smells in Android Applications
	- We hope that this research encourages the community to further investigate the important domain of mobile applications and how they are different from traditional desktop software.
	- Notou-se que maus cheiros tradicionais são encontrados em aplicações android porém em menos quantidade quando comparado com maus cheiros específicos da plataforma.
	- Tabela interessante sobre a qtde de publicações de artigos em eventos conceituados sobre qualidade de código e maus cheiros android revela que de 2008 a 2015 apenas 5 paper com relação a maus cheiros Android foram publicados contra 47 sobre o mesmo assuntos porém no ambiente de aplicações Java.

	
Removing Energy Code Smells with Reengineering Services
	- Muitos artigos chegaram a alguns maus cheiros porém relacionados a consumo de energia, eficiência, etc

A Tool-Supported Quality Smell Catalogue For Android Developers
	- Artigo que gerou o site http://www.modelrefactoring.org/smell_catalog com os 30 maus cheiros baseados na documentação oficial e em experiências de desenvolvedores e a ferramenta Refactoring (http://www.modelrefactoring.org/index.php/Refactoring).

An Empirical Study of the Performance Impacts of Android Code Smells
	- Novamente avaliação do maus cheiro com relação ao desempenho de memória e UI, não com relação a qualidade de código.
	- Avaliou o impacto de 3 code smells na perfomance com relação a UI e desempenho da memória em 5 versões diferentes de 2 aplicativos open source. 
	- A conclusão é que vale a pena a correção desses maus cheiros porém não se sabe dizer se o esforço para a correção vale o benefício.

Domain Matters: Bringing Further Evidence of the Relationships among Anti-patterns, Application Domains, and Quality-Related Metrics in Java Mobile Apps
	- Conclui também que alguns maus cheiros/antipatterns ocorrem mais em aplicações móveis do que em aplicações java. 


Submeter Artigo com resultados preliminares para:
	- ICSE Conference (May 20-28, 2017)
	- Mobile Summit (http://www.msummit.com.br/) 18 e 19 de Novembro
	- https://www.mobileworldcongress.com/conference/call-for-papers/
	- http://mobilewebdevconference.com/


==============================================================================================================================
Outras coisas

Apps mobile android tem a pasta resource, as pastas lá dentro podem ter multiplas versões, chamados de qualificadores, onde possuem recursos para um cenário específico como idioma, resolução, etc.






==============================================================================================================================
Open Code Procedure

https://researchrundowns.com/qual/qualitative-coding-analysis/
https://prpost.wordpress.com/2013/07/22/an-example-of-how-to-perform-open-coding-axial-coding-and-selective-coding/