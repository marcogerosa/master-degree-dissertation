Automatically generated by Mendeley Desktop 1.16.1
Any changes to this file will be lost if it is regenerated by Mendeley.

BibTeX export options can be customized via Preferences -> BibTeX in Mendeley Desktop

@article{Nagappan2015,
annote = {thus - assim
praise - elogio
therfore - portanto
treasure trove - tesouro escondido
derogatory - depreciativo
accomplishments - realiza{\c{c}}{\~{o}}es},
author = {Nagappan, Meiyappan and Shihab, Emad},
file = {:Users/SuelenGC/Downloads/Future-Trends-in-Software-Engineering-Research-for-Mobile-Apps.pdf:pdf},
journal = {Saner'15},
title = {{Future Trends in Software Engineering Research for Mobile Apps}},
year = {2015}
}
@article{Ko2009,
author = {Ko, Andrew and Myers, Brad A},
file = {:Users/SuelenGC/Library/Application Support/Mendeley Desktop/Downloaded/Ko, Myers - 2009 - Finding Causes of Program Output with the Java Whyline Finding Causes of Program Output with the Java Whyline.pdf:pdf},
isbn = {9781605582467},
title = {{Finding Causes of Program Output with the Java Whyline Finding Causes of Program Output with the Java Whyline}},
year = {2009}
}
@book{Gnu,
author = {Gnu, Livre},
file = {:Users/SuelenGC/Library/Application Support/Mendeley Desktop/Downloaded/Gnu - Unknown - o editor de texto Vim.pdf:pdf},
title = {{o editor de texto Vim}}
}
@article{Verloop2013,
abstract = {The mobile applications market is growing rapidly, over 85 billion mobile applications have been downloaded. Smartphone sales are already bigger than computer sales and this might become the first year in which over one billion smart phones will be sold. Regardless of these statistics there is not a lot of research to be found on the subject. In this thesis one of the observations done in a recent study on mobile applications is reproduced. We also look for code smells (patterns in source code that are associated with bad design and bad programming practices) in a number of commercial and open source applications. The results of this analysis is used to determine if certain code smells have a higher likelihood to appear in mobile application source code.},
annote = {- Qual as principais diferen{\c{c}}as entre apps android e aplica{\c{c}}{\~{o}}es tradicionais: Smaller number of developers, Short lifespan and development cycle, Regular platform updates, Limited processing power, Smaller project size, External libraries, Less inheritance e High Interactive Applications.

- Experimentou alguns maus cheiros do Fowler em aplica{\c{c}}{\~{o}}es android.},
author = {Verloop, D.},
file = {:Users/SuelenGC/Library/Application Support/Mendeley Desktop/Downloaded/Verloop - 2013 - Code Smells in the Mobile Applications Domain.pdf:pdf},
keywords = {android,code smells},
title = {{Code Smells in the Mobile Applications Domain}},
url = {http://repository.tudelft.nl/view/ir/uuid:bcba7e5b-e898-4e59-b636-234ad3fdc432/},
year = {2013}
}
@article{Linares-Vasquez2014,
abstract = {In recent years, the market of mobile software applications (apps) has maintained an impressive upward trajectory. As of today, the market for such devices features over 850K+ apps for Android, and 19 versions of the Android API have been released in 4 years. There is evidence that Android apps are highly dependent on the underlying APIs, and APIs instability (change proneness) and fault-proneness are a threat to the success of those apps. Therefore, the goal of this research is to create an approach that helps developers of Android apps to be better prepared for Android platform updates as well as the updates from third-party libraries that can potentially (and inadvertently) impact their apps with breaking changes and bugs. Thus, we hypothesize that the proposed approach will help developers not only deal with platform and library updates opportunely, but also keep (and increase) the user base by avoiding many of these potential API ”update” bugs.},
author = {Linares-V{\'{a}}squez, Mario},
doi = {10.1145/2591062.2591092},
file = {:Users/SuelenGC/Library/Application Support/Mendeley Desktop/Downloaded/Linares-V{\'{a}}squez - 2014 - Supporting evolution and maintenance of Android apps.pdf:pdf},
isbn = {9781450327688},
journal = {Companion Proceedings of the 36th International Conference on Software Engineering - ICSE Companion 2014},
keywords = {API changes,Android,Empirical Studies,Mining Software Repositories},
pages = {714--717},
title = {{Supporting evolution and maintenance of Android apps}},
url = {http://dl.acm.org/citation.cfm?id=2591062.2591092},
year = {2014}
}
@article{Tsitsiklis1996,
abstract = {We develop a methodological framework and present a few different ways in which dynamic programming and compact representations can be combined to solve large scale stochastic control problems. In particular, we develop algorithms that employ two types of feature-based compact representations; that is, representations that involve feature extraction and a relatively simple approximation architecture. We prove the convergence of these algorithms and provide bounds on the approximation error. As an example, one of these algorithms is used to generate a strategy for the game of Tetris. Furthermore, we provide a counter-example illustrating the difficulties of integrating compact representations with dynamic programming, which exemplifies the shortcomings of certain simple approaches.},
author = {Tsitsiklis, John N. and Roy, Benjamin},
doi = {10.1007/BF00114724},
file = {:Users/SuelenGC/Google Drive/Mestrado/QuartoSemestre/IA/Aprentacao/MDP1Tetris.pdf:pdf},
issn = {0885-6125},
journal = {Machine Learning},
keywords = {compact representation,curse of dimensionality,dynamic programming,features,function ap-,neuro-dynamic programming,proximation,reinforcement learning},
number = {1-3},
pages = {59--94},
title = {{Feature-based methods for large scale dynamic programming}},
volume = {22},
year = {1996}
}
@misc{TheMendeleySupportTeam2011,
abstract = {A quick introduction to Mendeley. Learn how Mendeley creates your personal digital library, how to organize and annotate documents, how to collaborate and share with colleagues, and how to generate citations and bibliographies.},
address = {London},
author = {{The Mendeley Support Team}},
booktitle = {Mendeley Desktop},
file = {:Users/SuelenGC/Library/Application Support/Mendeley Desktop/Downloaded/The Mendeley Support Team - 2011 - Getting Started with Mendeley.pdf:pdf},
keywords = {Mendeley,how-to,user manual},
pages = {1--16},
publisher = {Mendeley Ltd.},
title = {{Getting Started with Mendeley}},
url = {http://www.mendeley.com},
year = {2011}
}
@article{FinavaroAniche2016,
annote = {Regras Arquiteturais na Avalia{\c{c}}{\~{a}}o de M{\'{e}}tricas de C{\'{o}}digo e Detec{\c{c}}{\~{a}}o de Maus Cheiros},
author = {{Finavaro Aniche}, Maur{\'{i}}cio and {Aur{\'{e}}lio Gerosa}, Marco and Paulo, S{\~{a}}o and {Eduardo Guerra -INPE}, Bullet and {Cl{\'{a}}udio Sant}, Bullet and -ufba, Anna},
file = {:Users/SuelenGC/Library/Application Support/Mendeley Desktop/Downloaded/Finavaro Aniche et al. - 2016 - Architectural Roles in Code Metric Assessment and Code Smell Detection.pdf:pdf},
title = {{Architectural Roles in Code Metric Assessment and Code Smell Detection}},
year = {2016}
}
@article{Goldman2014,
author = {Goldman, Max and Little, Greg and Miller, Robert C},
file = {:Users/SuelenGC/Downloads/79662.pdf:pdf},
keywords = {and reports on our,collaboration,in the collaborative effort,outsourcing,own preliminary,per describes the system,that supports their role,this pa-},
title = {{Collabode : Collaborative Coding in the Browser Accessed Citable Link Detailed Terms Collabode : Collaborative Coding in the Browser}},
year = {2014}
}
@article{Driessens2004,
abstract = {Reinforcement learning, and Q-learning in particular, encounter two major problems when dealing with large state spaces. First, learning the Q-function in tabular form may be infeasible because of the excessive amount of memory needed to store the table, and because the Q-function only converges after each state has been visited multiple times. Second, rewards in the state space may be so sparse that with random exploration they will only be discovered extremely slowly. The first problem is often solved by learning a generalization of the encountered examples (e.g., using a neural net or decision tree). Relational reinforcement learning (RRL) is such an approach; it makes Q-learning feasible in structural domains by incorporating a relational learner into Q-learning. The problem of sparse rewards has not been addressed for RRL. This paper presents a solution based on the use of “reasonable policies” to provide guidance. Different types of policies and different strategies to supply guidance through these policies are discussed and evaluated experimentally in several relational domains to show the merits of the approach.},
author = {Driessens, Kurt and D{\v{z}}eroski, Sa{\v{s}}o},
doi = {10.1023/B:MACH.0000039779.47329.3a},
file = {:Users/SuelenGC/Google Drive/Mestrado/QuartoSemestre/IA/Aprentacao/RL1.pdf:pdf},
issn = {08856125},
journal = {Machine Learning},
keywords = {Guided exploration,Reinforcement learning,Relational learning},
pages = {271--304},
title = {{Integrating guidance into relational reinforcement learning}},
volume = {57},
year = {2004}
}
@article{Linares-Vasquez,
abstract = {Some previous work began studying the relationship between application domains and quality, in particular through the prevalence of code and design smells (e.g., anti-patterns). Indeed, it is generally believed that the presence of these smells degrades quality but also that their prevalence varies across domains. Though anecdotal experiences and empirical evidence gathered from developers and researchers support this belief, there is still a need to further deepen our understanding of the relationship between application domains and quality. Consequently, we present a large-scale study that investigated the systematic relationships between the presence of smells and quality-related metrics computed over the bytecode of 1,343 Java Mobile Edition applications in 13 different application domains. Although, we did not find evidence of a correlation between smells and quality-related metrics, we found (1) that larger differences exist between metric values of classes exhibiting smells and classes without smells and (2) that some smells are commonly present in all the domains while others are most prevalent in certain domains.},
annote = {- Conclui tamb{\'{e}}m que alguns maus cheiros/antipatterns ocorrem mais em aplica{\c{c}}{\~{o}}es m{\'{o}}veis do que em aplica{\c{c}}{\~{o}}es java.},
author = {Linares-V{\'{a}}squez, Mario and Klock, Sam and Mcmillan, Collin and Saban{\'{e}}, Aminata and Poshyvanyk, Denys and Gu{\'{e}}h{\'{e}}neuc, Yann-Ga{\"{e}}l},
file = {:Users/SuelenGC/Library/Application Support/Mendeley Desktop/Downloaded/Linares-V{\'{a}}squez et al. - Unknown - Domain Matters Bringing Further Evidence of the Relationships among Anti-patterns, Application Domai.pdf:pdf},
keywords = {Design,Distribution,Domain categories,Internal metrics,Java Mobile Edition,Maintenance,Software quality,Theory Keywords Anti-patterns,and Enhancement General Terms Measurement},
title = {{Domain Matters: Bringing Further Evidence of the Relationships among Anti-patterns, Application Domains, and Quality-Related Metrics in Java Mobile Apps}}
}
@article{Hecht2015c,
abstract = {Mobile apps are becoming complex software systems that must be developed quickly and evolve continuously to fit new user requirements and execution contexts. However, addressing these constraints may result in poor design choices, known as antipatterns, which may incidentally degrade software quality and performance. Thus, the automatic detection of antipatterns is an important activity that eases both maintenance and evolution tasks. Moreover, it guides developers to refactor their applications and thus, to improve their quality. While antipatterns are well-known in object-oriented applications, their study in mobile applications is still in their infancy. In this paper, we propose a tooled approach, called Paprika, to analyze Android applications and to detect object-oriented and Android-specific antipatterns from binaries of mobile apps. We validate the effectiveness of our approach on a set of popular mobile apps downloaded from the Google Play Store.},
author = {Hecht, Geoffrey and Rouvoy, Romain and Moha, Naouel and Duchien, Laurence},
doi = {10.1109/MobileSoft.2015.38},
file = {:Users/SuelenGC/Library/Application Support/Mendeley Desktop/Downloaded/Hecht et al. - 2015 - Detecting Antipatterns in Android Apps.pdf:pdf},
isbn = {978-0-7695-5566-9},
journal = {2015 2nd ACM International Conference on Mobile Software Engineering and Systems},
keywords = {Androids,Humanoid robots,Java,Measurement,Mobile applications,Mobile communication,Software},
pages = {148--149},
title = {{Detecting Antipatterns in Android Apps}},
url = {http://ieeexplore.ieee.org/lpdocs/epic03/wrapper.htm?arnumber=7283051},
year = {2015}
}
@article{Nagappan2015a,
annote = {Lido. Interessante mas pouco relacionamento com minha disserta{\c{c}}{\~{a}}o. Algumas refer{\^{e}}ncias valem adicionar na lista de leitura.
    	thus - assimpraise - elogiotherfore - portantotreasure trove - tesouro escondidoderogatory - depreciativoaccomplishments - realiza{\c{c}}{\~{o}}es},
author = {Nagappan, Meiyappan and Shihab, Emad},
file = {:Users/SuelenGC/Downloads/Future-Trends-in-Software-Engineering-Research-for-Mobile-Apps.pdf:pdf},
journal = {Saner'15},
title = {{Future Trends in Software Engineering Research for Mobile Apps}},
year = {2015}
}
@article{Hecht2015b,
author = {Hecht, Geoffrey and Benomar, Omar and Rouvoy, Romain and Moha, Naouel and Duchien, Laurence},
doi = {10.1109/ASE.2015.46},
file = {:Users/SuelenGC/Library/Application Support/Mendeley Desktop/Downloaded/Hecht et al. - 2015 - Tracking the Software Quality of Android Applications along their Evolution.pdf:pdf},
isbn = {9781509000258},
journal = {Automated Software Engineering},
keywords = {49,android,antipattern,give a genuine picture,large empirical data to,mobile app,more true in,of few,of the issue,on a single version,rather they detect antipatterns,software quality,specific open source systems,this is all the},
title = {{Tracking the Software Quality of Android Applications along their Evolution}},
year = {2015}
}
@article{Linares-Vasquez2014a,
abstract = {In recent years, the market of mobile software applications (apps) has maintained an impressive upward trajectory. As of today, the market for such devices features over 850K+ apps for Android, and 19 versions of the Android API have been released in 4 years. There is evidence that Android apps are highly dependent on the underlying APIs, and APIs instability (change proneness) and fault-proneness are a threat to the success of those apps. Therefore, the goal of this research is to create an approach that helps developers of Android apps to be better prepared for Android platform updates as well as the updates from third-party libraries that can potentially (and inadvertently) impact their apps with breaking changes and bugs. Thus, we hypothesize that the proposed approach will help developers not only deal with platform and library updates opportunely, but also keep (and increase) the user base by avoiding many of these potential API ”update” bugs.},
author = {Linares-V{\'{a}}squez, Mario},
doi = {10.1145/2591062.2591092},
file = {:Users/SuelenGC/Google Drive/Mestrado/Dissertacao/Papers/ICSE14DS-Android-CRC.pdf:pdf},
isbn = {9781450327688},
journal = {Companion Proceedings of the 36th International Conference on Software Engineering - ICSE Companion 2014},
keywords = {API changes,Android,Empirical Studies,Mining Software Repositories},
pages = {714--717},
title = {{Supporting evolution and maintenance of Android apps}},
url = {http://dl.acm.org/citation.cfm?id=2591062.2591092},
year = {2014}
}
@article{Verloop2013a,
abstract = {The mobile applications market is growing rapidly, over 85 billion mobile applications have been downloaded. Smartphone sales are already bigger than computer sales and this might become the first year in which over one billion smart phones will be sold. Regardless of these statistics there is not a lot of research to be found on the subject. In this thesis one of the observations done in a recent study on mobile applications is reproduced. We also look for code smells (patterns in source code that are associated with bad design and bad programming practices) in a number of commercial and open source applications. The results of this analysis is used to determine if certain code smells have a higher likelihood to appear in mobile application source code.},
author = {Verloop, D.},
file = {:Users/SuelenGC/Google Drive/Mestrado/Dissertacao/Papers/thesis.pdf:pdf},
keywords = {android,code smells},
title = {{Code Smells in the Mobile Applications Domain}},
url = {http://repository.tudelft.nl/view/ir/uuid:bcba7e5b-e898-4e59-b636-234ad3fdc432/},
year = {2013}
}
